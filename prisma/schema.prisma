// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// archivo schema.prisma

model User {
  id         Int      @id @default(autoincrement())
  username   String
  email      String   @unique
  password   String
  isAdmin    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reputation Int      @default(0)

  complaints Complaint[]
  comments   Comment[]
  votes      Vote[]
}

model Complaint {
  id          Int    @id @default(autoincrement())
  title       String
  description String

  priority   Int             @default(0)
  isResolved Boolean         @default(false)
  status     StatusComplaint @default(OPEN)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int?

  comments   Comment[]
  votes      Vote[]
  categories Category[]
  images     Image[]

  @@index([userId])
  @@index([locationId])
}

model Image {
  id          Int       @id @default(autoincrement())
  url         String
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  complaintId Int

  @@index([complaintId])
}

model Comment {
  id          Int       @id @default(autoincrement())
  text        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  complaintId Int

  @@index([complaintId])
  @@index([authorId])
}

model Vote {
  id          Int       @id @default(autoincrement())
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  complaintId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())

  @@unique([complaintId, userId])
  @@index([userId])
}

model Category {
  id         Int         @id @default(autoincrement())
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  complaints Complaint[]
}

model Location {
  id        Int      @id @default(autoincrement())
  latitude  Float
  longitude Float
  address   String?
  city      String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Complaint Complaint[]
}

enum StatusComplaint {
  OPEN
  CLOSED
  IN_PROGRESS
  RESOLVED
}
