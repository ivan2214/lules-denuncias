// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// archivo schema.prisma

// para next-auth

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String?
  username      String?
  email         String    @unique
  emailVerified DateTime?
  hashPassword  String?
  image         String?
  reputation    Int?      @default(0)

  complaints  Complaint[]
  comments    Comment[]
  votes       Vote[]
  accounts    Account[]
  LikeComment LikeComment[]
}

model Complaint {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String
  priority    Int             @default(0)
  isResolved  Boolean         @default(false)
  status      StatusComplaint @default(PENDING)
  anonymous   Boolean?        @default(false)
  address     String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  comments    Comment[]
  votes       Vote[]
  categories  Category[]
  images      Image[]
  LikeComment LikeComment[]

  @@index([userId])
}

model Image {
  url String @unique

  Complaint   Complaint? @relation(fields: [complaintId], references: [id])
  complaintId Int?

  @@index([complaintId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  author      User?         @relation(fields: [authorId], references: [id])
  authorId    String?
  complaint   Complaint     @relation(fields: [complaintId], references: [id])
  complaintId Int
  LikeComment LikeComment[]

  @@index([complaintId])
  @@index([authorId])
}

model LikeComment {
  id Int @id @default(autoincrement())

  author      User?     @relation(fields: [authorId], references: [id])
  authorId    String?
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  complaintId Int
  comment     Comment?  @relation(fields: [commentId], references: [id])
  commentId   Int

  @@index([commentId])
  @@index([complaintId])
  @@index([authorId])
}

model Vote {
  id          Int       @id @default(autoincrement())
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  complaintId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())

  @@unique([complaintId, userId])
  @@index([userId])
}

model Category {
  name String @unique

  Complaint   Complaint? @relation(fields: [complaintId], references: [id])
  complaintId Int?

  @@index([complaintId])
}

enum StatusComplaint {
  OPEN
  CLOSED
  IN_PROGRESS
  RESOLVED
  UNRESOLVED
  PENDING
}
